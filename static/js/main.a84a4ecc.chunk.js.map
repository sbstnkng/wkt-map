{"version":3,"sources":["components/header/header.module.css","components/map/map.module.css","components/editPanel/shapeItem.module.css","components/editPanel/editPanel.module.css","components/header/index.js","components/header/Header.jsx","components/map/Map.jsx","components/map/index.js","components/editPanel/ShapeItem.jsx","utils/stringUtils.js","components/editPanel/EditModal.jsx","utils/wktParser.js","components/section/index.js","components/section/Section.jsx","components/editPanel/index.js","components/editPanel/EditPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","sticky","Brand","href","className","styles","navbarBrand","Collapse","Text","target","rel","defaultCenter","calculateCenter","shapes","undefined","length","lat","lon","forEach","shape","centerPoint","Map","center","zoom","maxZoom","map","TileLayer","maxNativeZoom","attribution","url","filter","visible","GeoJSON","key","hash","data","geoJson","color","weight","createShapes","defaultProps","ShapeItem","deleteItem","updateItemVisibility","editItem","label","wkt","updateVisibility","Card","body","Row","Col","xs","actions","style","onClick","icon","renderVisibility","isString","str","isBlank","string","isEmpty","trim","EditModal","id","show","handleClose","handleSave","editShape","useState","setLabel","setWkt","shapeInput","useRef","useEffect","current","focus","calculateCenterPoint","bbox","Modal","onHide","closeButton","Title","Body","Form","onSubmit","e","preventDefault","wktShape","Terraformer","WKT","Group","as","controlId","Label","column","sm","Control","type","placeholder","value","onChange","event","ref","rows","span","offset","Button","Section","children","EditPanel","updateShapes","setShow","setEditShape","handleShow","newShapes","item","updateItem","newShape","find","Container","title","size","App","setShapes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a84a4ecc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarBrand\":\"header_navbarBrand__2WSmN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__1cjP6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actions\":\"shapeItem_actions__1rf7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"editPanel_title__3xB3B\"};","import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport styles from './header.module.css';\n\nconst Header = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n      <Navbar.Brand href=\"/\" className={`${styles.navbarBrand} align-middle`}>\n        <i className=\"fas fa-map-marked fa-2x\"></i>\n        <span>WKT Map</span>\n      </Navbar.Brand>\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Navbar.Text>\n          <a href=\"https://github.com/sbstnkng/wkt-map\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className=\"fab fa-github fa-2x\"></i>\n          </a>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map as LeafletMap, TileLayer, GeoJSON } from 'react-leaflet';\nimport hash from 'object-hash';\nimport styles from './map.module.css';\n\nconst defaultCenter = [52.52226, 13.413144];\n\nconst createShapes = (shapes) => {\n  return shapes\n    .filter((shape) => shape.visible)\n    .map((shape) => <GeoJSON key={hash(shape)} data={shape.geoJson} color={shape.color} weight={2} />);\n};\n\nconst calculateCenter = (shapes) => {\n  if (shapes === undefined || shapes.length === 0) return defaultCenter;\n\n  let lat = 0;\n  let lon = 0;\n  shapes.forEach((shape) => {\n    lat += shape.centerPoint[0];\n    lon += shape.centerPoint[1];\n  });\n\n  return [lat / shapes.length, lon / shapes.length];\n};\n\nconst Map = ({ shapes }) => {\n  return (\n    <LeafletMap center={calculateCenter(shapes)} zoom={16} maxZoom={22} className={styles.map}>\n      <TileLayer\n        maxZoom={22}\n        maxNativeZoom={19}\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {createShapes(shapes)}\n    </LeafletMap>\n  );\n};\n\nMap.defaultProps = {\n  shapes: [],\n};\n\nMap.propTypes = {\n  shapes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      label: PropTypes.string,\n      geoJson: PropTypes.object,\n      wkt: PropTypes.string,\n      color: PropTypes.string,\n      centerPoint: PropTypes.arrayOf(PropTypes.number),\n      visible: PropTypes.bool,\n    })\n  ).isRequired,\n};\n\nexport default Map;\n","import Map from './Map';\n\nexport default Map;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport styles from './shapeItem.module.css';\n\nconst ShapeItem = ({ shape, deleteItem, updateItemVisibility, editItem }) => {\n  const { label, wkt } = shape;\n\n  const updateVisibility = () => {\n    updateItemVisibility({ ...shape, visible: !shape.visible });\n  };\n\n  const renderVisibility = (shape) => {\n    let color = '#17a2b8';\n    let icon = 'fa-eye';\n\n    if (!shape.visible) {\n      color = '#6c757d';\n      icon = 'fa-eye-slash';\n    }\n\n    return <i className={`fas ${icon}`} style={{ color }} onClick={updateVisibility}></i>;\n  };\n\n  return (\n    <Card body className=\"my-2\">\n      <Row className=\"align-items-center\">\n        <Col className=\"text-truncate\">{label}</Col>\n        <Col className=\"text-truncate\" xs={8}>\n          {wkt}\n        </Col>\n        <Col className={styles.actions}>\n          <i className=\"delete fas fa-trash\" style={{ color: '#e83e8c' }} onClick={() => deleteItem(shape)}></i>\n          <i className=\"edit fas fa-edit\" style={{ color: '#28a745' }} onClick={() => editItem(shape)}></i>\n          {renderVisibility(shape)}\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n\nShapeItem.propTypes = {\n  id: PropTypes.number,\n  shape: PropTypes.shape({\n    id: PropTypes.number,\n    label: PropTypes.string,\n    geoJson: PropTypes.object,\n    wkt: PropTypes.string,\n    color: PropTypes.string,\n    centerPoint: PropTypes.arrayOf(PropTypes.number),\n    visible: PropTypes.bool,\n  }),\n  deleteItem: PropTypes.func.isRequired,\n  updateItemVisibility: PropTypes.func.isRequired,\n  editItem: PropTypes.func.isRequired,\n};\n\nexport default ShapeItem;\n","export const isString = (str) => typeof str == 'string';\nexport const isEmpty = (string) => !isString(string) || 0 === string.length;\nexport const isBlank = (string) => !isString(string) || isEmpty(string.trim());\nexport const getStringOrDefault = (string, defaultValue) => (isBlank(string) ? defaultValue : string);\n","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { parseWktToGeoJson } from '../../utils/wktParser';\n\nconst EditModal = ({ id, show, handleClose, handleSave, editShape }) => {\n  const [label, setLabel] = useState('');\n  const [wkt, setWkt] = useState('');\n  const shapeInput = useRef();\n\n  useEffect(() => {\n    setLabel(editShape.label || `Shape-${id}`);\n    setWkt(editShape.wkt);\n\n    if (shapeInput.current) {\n      shapeInput.current.focus();\n    }\n  }, [editShape, id, show]);\n\n  const resetStates = () => {\n    setLabel('');\n    setWkt('');\n  };\n\n  const calculateCenterPoint = (geoJson) => {\n    const bbox = geoJson.bbox();\n    const lon = (bbox[0] + bbox[2]) / 2;\n    const lat = (bbox[1] + bbox[3]) / 2;\n\n    return [lat, lon];\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const geoJson = parseWktToGeoJson(wkt);\n    handleSave({\n      id,\n      label,\n      wkt,\n      geoJson: geoJson,\n      color: 'teal',\n      centerPoint: calculateCenterPoint(geoJson),\n      visible: true,\n    });\n\n    resetStates();\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>New Shape</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group as={Row} controlId=\"formBasicLabel\">\n            <Form.Label column sm={2}>\n              Label\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Shape Label\"\n                value={label}\n                onChange={(event) => setLabel(event.target.value)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"formBasicCoordinates\">\n            <Form.Label column sm={2}>\n              Geometry\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                ref={shapeInput}\n                as=\"textarea\"\n                rows=\"6\"\n                placeholder=\"WKT Coordinates\"\n                value={wkt}\n                onChange={(event) => setWkt(event.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button variant=\"primary\" type=\"submit\">\n                Save shape\n              </Button>\n            </Col>\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nEditModal.propTypes = {\n  show: PropTypes.bool,\n  id: PropTypes.number.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  handleSave: PropTypes.func.isRequired,\n  editShape: PropTypes.object,\n};\n\nexport default EditModal;\n","import * as Terraformer from 'terraformer';\nimport * as WKT from 'terraformer-wkt-parser';\nimport { isBlank } from './stringUtils';\n\nexport const parseWktToGeoJson = (wktShape) => {\n  if (isBlank(wktShape)) return new Terraformer.Point([]);\n\n  return WKT.parse(wktShape);\n};\n","import Section from './Section';\n\nexport default Section;\n","import React from 'react';\n\nconst Section = ({ children }) => {\n  return <section className=\"my-3\">{children}</section>;\n};\n\nexport default Section;\n","import EditPanel from './EditPanel';\n\nexport default EditPanel;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport ShapeItem from './ShapeItem';\nimport EditModal from './EditModal';\nimport Section from '../section';\nimport styles from './editPanel.module.css';\n\nconst EditPanel = ({ shapes, updateShapes }) => {\n  const [show, setShow] = useState(false);\n  const [editShape, setEditShape] = useState({});\n\n  const handleClose = () => {\n    setShow(false);\n    setEditShape({});\n  };\n  const handleShow = (shape = {}) => {\n    setEditShape(shape);\n    setShow(true);\n  };\n\n  const handleSave = (newShape) => {\n    handleClose();\n    updateItem(newShape);\n  };\n\n  const deleteItem = (shape) => {\n    const newShapes = shapes.filter((item) => item !== shape);\n    updateShapes(newShapes);\n  };\n\n  const updateItem = (newShape) => {\n    const shapeExists = shapes.find((item) => item.id === newShape.id);\n    let newShapes = [];\n\n    if (shapeExists) {\n      newShapes = shapes.map((item) => (item.id === newShape.id ? newShape : item));\n    } else {\n      newShapes = [...shapes, newShape];\n    }\n    updateShapes(newShapes);\n  };\n\n  const renderShapeItems = () => {\n    return shapes.map((shape) => (\n      <ShapeItem\n        key={shape.id}\n        shape={shape}\n        deleteItem={deleteItem}\n        updateItemVisibility={updateItem}\n        editItem={(item) => handleShow(item)}\n      />\n    ));\n  };\n\n  return (\n    <Container>\n      <Section>\n        <div className={styles.title}>\n          <span className=\"text-muted\">Add WKT formatted shapes</span>\n          <Button variant=\"primary\" size=\"sm\" onClick={() => handleShow()}>\n            <i className=\"fas fa-plus\"></i> New\n          </Button>\n        </div>\n        <div className=\"pt-3\">{renderShapeItems()}</div>\n      </Section>\n\n      <EditModal\n        show={show}\n        handleClose={handleClose}\n        handleSave={handleSave}\n        id={editShape.id || shapes.length + 1}\n        editShape={editShape}\n      />\n    </Container>\n  );\n};\n\nEditPanel.propTypes = {\n  shapes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      label: PropTypes.string,\n      geoJson: PropTypes.object,\n      wkt: PropTypes.string,\n      color: PropTypes.string,\n      centerPoint: PropTypes.arrayOf(PropTypes.number),\n      visible: PropTypes.bool,\n    })\n  ).isRequired,\n  updateShapes: PropTypes.func.isRequired,\n};\n\nexport default EditPanel;\n","import React, { useState } from 'react';\nimport Header from './components/header';\nimport Map from './components/map';\nimport EditPanel from './components/editPanel';\n\nconst App = () => {\n  const [shapes, setShapes] = useState([]);\n\n  return (\n    <>\n      <Header />\n      <Map shapes={shapes} />\n      <EditPanel shapes={shapes} updateShapes={setShapes} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}